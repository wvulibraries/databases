require 'rails_helper'

describe DatabaseImportService do
  let(:csv_file) { "#{Rails.root}/spec/support/files/databases-test-import.csv" }
  let(:single_csv_file) { "#{Rails.root}/spec/support/files/databases-single-import.csv" }
  let(:vendor) { FactoryBot.create(:vendor) }
  let(:subject) { FactoryBot.create(:subject) }

  context '.create_vendor' do
    it 'should return the id of an already persisted vendor' do
      vendor_obj = DatabaseImportService.new.create_vendor(vendor.name)
      expect(vendor_obj).to be_a(Vendor)
      expect(vendor_obj.id).to eq(vendor.id)
    end

    it 'should create a new vendor because one did not exist' do
      vendors = Vendor.all.pluck(:id)
      vendor_obj = DatabaseImportService.new.create_vendor('Mojo The Bulky aka #5')
      expect(vendor_obj).to be_a(Vendor)
      expect(vendors).not_to include(vendor_obj.id)
    end
  end

  context '.create_association_list' do
    context 'Subjects' do
      it 'should return a array of subjects ids' do
        subjects = DatabaseImportService.new.create_association_lists('Biology;Art;Science;Stuff', Subject)
        expect(subjects).to be_a(Array)
        expect(subjects.count).to eq(4)
        expect(Subject.all.count).to eq(4)
      end

      it 'should return a list of subjects with no duplicates' do
        subjects = DatabaseImportService.new.create_association_lists('Biology;Art;Science;Stuff;Art;Stuff;', Subject)
        expect(subjects).to be_a(Array)
        expect(subjects.count).to eq(4)
        expect(Subject.all.count).to eq(4)
      end

      it 'should not create any subjects that already exist' do
        subjects = DatabaseImportService.new.create_association_lists("Biology;Art;Science;Stuff;#{subject.name}", Subject)
        expect(subjects).to be_a(Array)
        expect(subjects.count).to eq(5)
        expect(Subject.all.count).to eq(5)
      end
    end

    context 'Resources' do
      it 'should return a array of resources ids' do
        resources = DatabaseImportService.new.create_association_lists('Article;Text;Journal;Website', Resource)
        expect(resources).to be_a(Array)
        expect(resources.count).to eq(4)
        expect(Resource.all.count).to eq(4)
      end
  
      it 'should return a list of resources with no duplicates' do
        resources = DatabaseImportService.new.create_association_lists('Article;Text;Journal;Website;Journal;Website;', Resource)
        expect(resources).to be_a(Array)
        expect(resources.count).to eq(4)
        expect(Resource.all.count).to eq(4)
      end
  
      it 'should not create any resources that already exist' do
        resources = DatabaseImportService.new.create_association_lists('Article;Text;Journal;Website;Journal;Website;', Resource)
        expect(resources).to be_a(Array)
        expect(resources.count).to eq(4)
        expect(Resource.all.count).to eq(4)
      end
    end
  end

  context '.import' do
    it 'update and create' do
      expect(Database.all.count).to eq(0)
      DatabaseImportService.new.import(single_csv_file)
      expect(Database.all.count).to eq(1)
    end

    it 'supports updating and creating brand new records' do
      # build some data
      databases = []
      4.times do |i|
        db = FactoryBot.create(:database_basic)
        databases.push(db)
      end
      # set the data into a csv 
      csv = Database.to_csv
      csv = CSV.parse(csv, headers: true)
      # put a new record attributes into the csv
      database = FactoryBot.build(:database_basic)
      attributes = %w[
        id libguides_id name status years_of_coverage vendor_name url access 
        full_text_db help help_url description url_uuid new_database popular
        trial_database trial_expiration_date title_search subjects_column
        resources_column created_at updated_at
      ]
      csv << attributes.map { |attr| database.send(attr) }

      # Save the file for debugging.
      temp_file = "#{Rails.root}/spec/support/files/temp.csv"
      File.open(temp_file, 'w') { |file| file.write(csv.to_s) }

      # create a baseline expectation
      expect(Database.all.count).to eq(4)

      # run import
      DatabaseImportService.new.import(temp_file)

      # Run expectations on the ImportService
      expect(Database.all.count).to eq(5)
    end

    it 'creates a single record from csv generated by factory bot' do
      expect(Database.all.count).to eq(0)
      DatabaseImportService.new.import("#{Rails.root}/spec/support/files/test.csv")
      expect(Database.all.count).to eq(1)
    end

    it 'creates a bulk import with generated data' do
      expect(Database.all.count).to eq(0)
      DatabaseImportService.new.import("#{Rails.root}/spec/support/files/databases-auto-import.csv")
      expect(Database.all.count).to eq(5)
    end
  end
end
