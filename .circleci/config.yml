version: 2
jobs:
  build:
    working_directory: ~/circleci-databases/databases
    parallelism: 4
    docker:
      - image: cimg/ruby:3.3.4-browsers
        environment:
          RAILS_ENV: test
          CC_TEST_REPORTER_ID: 28c11d4cad0e4d8aa4796ce66a8e080700ef62945e2b4aeb62b1f6a12b458c6d
          COVERAGE: true  
          ELASTIC_URL: localhost:9200
          ELASTIC_USERNAME: elastic
          ELASTIC_PASSWORD: password
      - image: cimg/mysql:8.0
        environment:
          MYSQL_ROOT_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: circleci   
      - image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3    
        environment:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m -Dlog4j2.formatMsgNoLookups=true
          ELASTIC_USERNAME: elastic
          ELASTIC_PASSWORD: password
          xpack.security.enabled: true
      - image: selenium/standalone-chrome
        name: selenium
        ports: 
          - "4444:4444"
          - "7900:7900"                             
    steps:    
      - checkout:
          path: ~/circleci-databases
      - run:
          name: Configure secrets.yml
          command: mv config/secrets.ci.yml config/secrets.yml
      - run:
          name: Configure database.yml
          command: mv config/database.ci.yml config/database.yml
      - run:
          name: Configure application.yml
          command: mv config/application.ci.yml config/application.yml        
      - run:
          name: Configure capybara.rb
          command: mv spec/support/capybara.ci.rb spec/support/capybara.rb
      - run:
          name: apt update
          command: sudo apt-get -y update
      - run:
          name: Install Node 18
          command: |
            curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
      - run:
          name: Install Capybara Webkit Dependencies
          command: |
            sudo apt-get install -y \
              libqt5webkit5-dev \
              qtbase5-dev \
              qtchooser \
              qt5-qmake \
              qtbase5-dev-tools

      - run:
          name: Install GStreamer Dependencies
          command: |
            sudo apt-get install -y \
              gstreamer1.0-plugins-base \
              gstreamer1.0-tools \
              gstreamer1.0-x

      # Restore bundle cache
      - type: cache-restore
        key: databases-bundle-{{ checksum "Gemfile.lock" }}

      # - type: cache-restore
      #   key: databases-yarn-{{ checksum "yarn.lock" }}       

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

      ###########################################
      # Force Bundler Version
      ###########################################  
      - run:
          name: Force Bundler Version
          command: |
            sudo gem update --system
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      ###########################################
      # Bundler w/ caching
      ###########################################
      - restore_cache:
          name: Restore Bundler Cache
          keys:
            - bundler-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: install ruby dependencies
          command: |
            bundle check || bundle install --path vendor/bundle --jobs=4 --retry=3

      - run:
          name: Verify Installed Gems
          command: bundle list

      - save_cache:
          name: Save Bundler Cache
          key: bundler-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Wait for MySQL to start
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      # Store yarn cache
      - type: cache-save
        key: databases-yarn-{{ checksum "yarn.lock" }}
        paths:
          - ~/.yarn-cache

      - run:
          name: Setup Database
          command: |
            bundle exec rake db:create db:schema:load

      - run:
          name: Clean Assets
          command: rm -rf public/assets

      - run:
          name: Check Node Modules
          command: ls -l node_modules

      - run:
          name: Assets Precompile
          command: |
            RAILS_ENV=production bundle exec rake assets:precompile --trace

      - run:
          name: Run tests
          command: |
            mkdir -p test-results/rspec test-artifacts
            ./cc-test-reporter before-build
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 \
                              --color \
                              --order random \
                              --out test-results/rspec/rspec.xml \
                              --format progress \
                              -- ${TESTFILES}
      - run:
          name: Code Climate Test Coverage
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-artifacts

  upload-coverage:
    docker:
      - image: cimg/ruby:3.3.4
    environment:
       CC_TEST_REPORTER_ID: de4e83be2764daa72e88022fb8e2ff596aa8fc1074c93e533fedafb00bb62805
    working_directory: ~/circle
