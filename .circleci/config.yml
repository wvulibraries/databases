version: 2
jobs:
  build:
    working_directory: ~/circleci-databases/databases
    parallelism: 1
    shell: /bin/bash --login
    environment:
      RAILS_ENV: test
      RACK_ENV: test
      COVERAGE: true
      TZ: /usr/share/zoneinfo/America/NewYork
    docker:
      - image: cimg/ruby:3.4.3-browsers
        environment:
          RAILS_ENV: test
          ELASTICSEARCH_URL: http://localhost:9200
          COVERAGE: true
      - image: cimg/mysql:8.0
        environment:
          MYSQL_ROOT_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: circleci
      - image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
        environment:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    steps:
      - checkout:
          path: ~/circleci-databases

      - run:
          name: Wait for Elasticsearch
          command: |
            timeout 300 bash -c '
            until curl -s http://localhost:9200/
            do
              echo "Waiting for Elasticsearch..."
              sleep 2
            done'

      - run: mv config/secrets.ci.yml config/secrets.yml
      - run: mv config/database.ci.yml config/database.yml
      - run: mv config/application.ci.yml config/application.yml

      - run:
          name: apt update
          command: sudo apt update
      - run:
          name: Install Node 18
          command: |
            curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
      - run:
          name: Install Node.js Dependencies
          command: npm install

      - type: cache-restore
        key: databases-bundle-{{ checksum "Gemfile.lock" }}

      - run:
          name: install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

      - run:
          name: Force Bundler Version
          command: |
            sudo gem update --system
            echo 'export BUNDLER_VERSION=$(tail -1 Gemfile.lock | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      - run: bundle config set path 'vendor/bundle'
      - run: bundle install --jobs=4 --retry=3

      - run:
          name: Wait for MySQL to start
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - type: cache-save
        key: databases-bundle-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

      - run:
          name: Setup Database
          command: bundle exec rake db:create db:schema:load

      - run:
          name: Assets Precompile
          command: bundle exec rake assets:precompile

      - run:
          name: Run tests with coverage
          command: |
            mkdir -p test-results/rspec test-artifacts coverage
            bundle exec rspec --profile 10 \
                              --color \
                              --order random \
                              --out test-results/rspec/rspec.xml \
                              --format progress

      - run:
          name: Install Qlty CLI
          command: curl https://qlty.sh | sh

      - run:
          name: Upload coverage to Qlty
          command: qlty coverage publish coverage/lcov.info

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-artifacts

workflows:
  version: 2
  commit:
    jobs:
      - build
